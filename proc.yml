# Orb 'circleci/aws-ecr@4.0.0' resolved to 'circleci/aws-ecr@4.0.0'
version: 2
jobs:
  checkout:
    working_directory: ~/code
    docker:
    - image: circleci/node:11.5
    - image: circleci/postgres:9.6-alpine-postgis-ram
      environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: bookify_test
    steps:
    - checkout
    - restore_cache:
        keys:
        - v1-yarn-cache-{{ checksum "yarn.lock" }}
        - v1-yarn-cache-
    - run:
        command: yarn install --frozen-lockfile
    - save_cache:
        key: v1-yarn-cache-{{ checksum "yarn.lock" }}
        paths:
        - ./node_modules
  aws-ecr/build_and_push_image:
    machine: true
    steps:
    - checkout
    - run:
        name: Install AWS CLI
        command: |
          export PIP=$(which pip pip3 | head -1)
          if [[ -n $PIP ]]; then
            if which sudo > /dev/null; then
              sudo $PIP install awscli --upgrade
            else
              # This installs the AWS CLI to ~/.local/bin. Make sure that ~/.local/bin is in your $PATH.
              $PIP install aws --upgrade --user
            fi
          elif [[ $(which unzip curl | wc -l) -eq 2 ]]; then
            cd
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            if which sudo > /dev/null; then
              sudo ~/awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
            else
              # This installs the AWS CLI to the default location (~/.local/lib/aws) and create a symbolic link (symlink) at ~/bin/aws. Make sure that ~/bin is in your $PATH.
              awscli-bundle/install -b ~/bin/aws
            fi
            rm -rf awscli-bundle*
            cd -
          else
            echo "Unable to install AWS CLI. Please install pip."
            exit 1
          fi
    - run:
        name: Configure AWS Access Key ID
        command: |
          aws configure set aws_access_key_id \
          $AWS_ACCESS_KEY_ID \
          --profile default
    - run:
        name: Configure AWS Secret Access Key
        command: |
          aws configure set aws_secret_access_key \
          $AWS_SECRET_ACCESS_KEY \
          --profile default
    - run:
        name: Configure AWS default region
        command: |
          aws configure set region $AWS_DEFAULT_REGION \
          --profile default
    - run:
        command: |
          # aws ecr get-login returns a login command w/ a temp token
          LOGIN_COMMAND=$(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)

          # save it to an env var & use that env var to login
          $LOGIN_COMMAND
        name: Log into Amazon ECR
    - run:
        command: |
          docker build \
             \
            -f Dockerfile \
            -t $AWS_ECR_ACCOUNT_URL/bookify:${CIRCLE_SHA1} \
            .
        name: Build docker image
    - run:
        command: docker push $AWS_ECR_ACCOUNT_URL/bookify:${CIRCLE_SHA1}
        name: Push image to Amazon ECR
workflows:
  bookify_cd:
    jobs:
    - checkout:
        filters:
          branches:
            only:
            - master
    - aws-ecr/build_and_push_image:
        requires:
        - checkout
  version: 2

# Original config.yml file:
# version: 2.1
# orbs:
#   aws-ecr: circleci/aws-ecr@4.0.0
# 
# ###
# # Specifies required docker environments to
# # successfully run the jobs. For this purpose,
# # each workflow uses its own executor:
# # - CI: For running the tests, a node environment is required
# executors:
#   ci-executor:
#     working_directory: ~/code
#     docker:      
#       - image: circleci/node:11.5
#       - image: circleci/postgres:9.6-alpine-postgis-ram
#         environment:
#           POSTGRES_USER: postgres
#           POSTGRES_PASSWORD: postgres
#           POSTGRES_DB: bookify_test
# 
# ###
# # Commnands are reusable job parts
# # the parameters provide a way to customize
# # behavior
# commands:
#   
# 
# ###
# # Jobs a specific steps inside a workflow
# # They should always make use of the commands
# # so that their definition stays readable
# jobs:
#   checkout:
#     executor: ci-executor
#     steps:
#       - checkout
#       - restore_cache:
#           keys:
#             - v1-yarn-cache-{{ checksum \"yarn.lock\" }}
#             - v1-yarn-cache-
#       - run: yarn install --frozen-lockfile
#       - save_cache:
#           key: v1-yarn-cache-{{ checksum \"yarn.lock\" }}
#           paths:
#             - ./node_modules
#   
#   features:
#     executor: ci-executor
#     steps:
#     # todo wait for postrgress 
#       - run: yarn features
# 
# workflows:
#   bookify_cd:
#     jobs:
#       - checkout:
#           filters:
#             branches:
#               only:
#                 - master
#       # - features:
#       #   requires:
#       #     - checkout
#       - aws-ecr/build_and_push_image:
#           account-url: AWS_ECR_ACCOUNT_URL
#           repo: \"bookify\"
#           region: AWS_DEFAULT_REGION
#           tag: ${CIRCLE_SHA1}
#           requires:
#             - checkout