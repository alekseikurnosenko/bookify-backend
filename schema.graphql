schema {
  query: Query  
  mutation: Mutation
}

type Query {
  events: [Event!]!
  event(id: ID!): Event!
  user: User!
}

type Mutation {
  createEvent(input: CreateEventInput!): Event!
  cancelEvent(input: CancelEventInput!): Event!

  applyForEvent(eventId: ID!): EventAttendance!
  cancelEventAttendance(eventId: ID!): EventAttendance!

  signUp(input: SignUpInput!): SignUpPayload!
  signIn(input: SignInInput!): SignInPayload!
}

scalar DateTime

type Event {
  id: ID!
  name: String!
  status: EventStatus!
  createdAt: DateTime!
  attendees: [EventAttendance!]!
}

type EventAttendance {
  id: ID!
  user: User!
  role: EventAttendanceRole!
  status: EventAttendanceStatus!
}

type User {
  id: ID!
  email: String!
}

enum EventStatus {
  SCHEDULED
  CANCELED
}

enum EventAttendanceStatus {
  CONFIRMED
  CANCELED
}

enum EventAttendanceRole {
  OWNER
  GUEST
}

input CreateEventInput {
  name: String!
}

input CancelEventInput {
  id: ID!
}

input SignUpInput {
  email: String!
  password: String!
}

type SignUpPayload {
  user: User!
  token: String!
}

input SignInInput {
  email: String!
  password: String!
}

type SignInPayload {
  user: User!
  token: String!
}