schema {
  query: Query  
  mutation: Mutation
}

type Query {
  meetups: [Meetup!]!
  meetup(id: String!): Meetup!
  user: User!
}

type Mutation {
  createMeetup(input: CreateMeetupInput!): Meetup!
  cancelMeetup(input: CancelMeetupInput!): Meetup!

  applyForMeetup(meetupId: String!): MeetupAttendance!
  cancelMeetupAttendance(meetupId: String!): MeetupAttendance!

  signUp(input: SignUpInput!): SignUpPayload
  signIn(input: SignInInput!): SignInPayload!
}

scalar DateTime

type Meetup {
  id: String!
  name: String!
  status: MeetupStatus!
  createdAt: DateTime!
  attendees: [MeetupAttendance!]!
}

type MeetupAttendance {
  user: User!
  role: MeetupRole!
  status: MeetupAttendanceStatus!
}

type User {
  id: String!
  email: String!
}

enum MeetupStatus {
  SCHEDULED
  CANCELED
}

enum MeetupAttendanceStatus {
  CONFIRMED
  CANCELED
}

enum MeetupRole {
  OWNER
  GUEST
}

input CreateMeetupInput {
  name: String!
}

input CancelMeetupInput {
  id: String!
}

input SignUpInput {
  email: String!
  password: String!
}

type SignUpPayload {
  user: User!
  token: String!
}

input SignInInput {
  email: String!
  password: String!
}

type SignInPayload {
  user: User!
  token: String!
}