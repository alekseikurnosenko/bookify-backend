// Event is a (single?) event
// It has a start time
// It may have a place specified (place might not be known yet)
// It has a status. (Who completes the event? - probably no-one)
// It might have attendance limit
// It has a list of attendess with different statuses

entity Event {
    id: string
    name: string
    description: string?    
    place: string? // Event can be created without a place, it can be set later    
    books: Book[] // Books this event is about, can be empty
    time: datetime // Start time, endtime?
    status: EventStatus // [scheduled, canceled]
    attendees: Attendee[] // List of people who is going to attend, can be empty    
    attendanceLimit: int? // Null for unlimited
    comments: Message[]
}

event EventCreated {
    event: Event
    time: datetime
}

command CreateEvent {
    name: string
    description: string?    
    place: string?
    books: Book[]
    time: datetime    
    attendees: Attendee[]
}

// Is canceling and deleting event the same?
// When event is cancelled we have notify every attendee
// I should still see this event in my feed, need to dismss it
event EventCanceled {
    event: Event
    time: datetime
}
command CancelEvent {
    id: string
}

// Do we need to include before/after info?
event EventUpdated {
    event: Event
    time: datetime
}

// Should every field here be optional? Or should we require to always pass all the data?
// Status change should be driven by other events
// Constraint: We cannot change attendance limit to be less than number of confirmed attendees
command UpdateEvent {
    id: string
    name: string?
    description: string?
    place: string?
    time: datetime?
    books: Boook[]?    
    attendanceLimit: int? // (x) => x >= attendess.filter { it.confirmed }.size
}

value Book {
    isbn: string
    title: string
    description: string
    authors: string // All authors
}

// As a user I want to attend a event
// AddUserToAttendeeList
commmand CreateEventInvitation {

}

// UserAddedToAttendeeList
event EventInvitationCreated {
    user: User
    event: Event
    status: EventInvitationStatus
}

// If there is an attendance limit
// If there are users in the waiting list
// When the attendee list has a free spot
// Promote first user from the waiting list to the attendee list
command ChangeEventInvitationStatus
event EventInvitationStatusChanged {

}

// Can we even delete them?
// Shouldn't that be just a status change?
command DeleteEventInvitation
event UserRemovedFromAttendeeList {}

// Invitations
// As a event organzier, I want to invite user to a event
// User has to respond whether he would attend or not
// Can still reuse default commands
// Inviting user to event is adding him to attendeeList with special status
// Confirming or declining invite - changing the status

// Attendee is a user that want to attend a event
// Is every attendee a user? yes.
// Isn't that EventInvitation? Yep, let's call it EventInvitation then. (Was Attendee)
// Proper status vs actual dates (declined_at, canceled_at)
entity EventAttendance (EventInvitation/Attendee) {    
    id: string
    user: User
    event: Event
    role: EventRole // [organizer, guest]
    status: EventInvitationStatus // [waiting, confirmed, declined, canceled, dismissed]
}

// Message
// As a user I want to leave a public message for a particlar event
// Message has text, author, time it was posted
// Event owns the messages

entity Message {
    id: string
    text: string
    author: User
    time: datetime    
}

command AddMessage
event MessageAdded {
    comment: Comment
    event: Event
}

// Public and private - Out of scope
// Public messages - visible on the event page to everyone (question, thanks)
// Private - between users, event internal - only for confimed users for example

// Schedules - Out of scope
// As a user I want to have recurring events
entity EventSchedule {

}


// Registered user
entity User {
    id: string
    name: string
    email: string    
    created_at: datetime // registration date
    // events: Event[] // we probably don't want user to hold every event he has ever attended
}

command CreateUser
event UserCreated

command UpdateUser
event UserUpdated